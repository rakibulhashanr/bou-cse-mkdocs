/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EmoTagsTitler
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var EmoTagsTitler = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.emojiDetectRegex = /(\p{Emoji_Presentation}|\p{Emoji}\uFE0F)/gu;
    this.emojiReplaceRegex = /^(\p{Emoji_Presentation}|\p{Emoji}\uFE0F)+\s*/gu;
  }
  // Define a method to run when your plugin is loaded
  async onload() {
    this.registerEvent(
      this.app.metadataCache.on("changed", this.addTagsEmojiToTitle.bind(this))
    );
    this.addCommand({
      id: "add-emojis-to-all-notes",
      name: "Add emojis to the titles of all notes that have emoji tags",
      callback: () => {
        this.addEmojisToAllNotes();
      }
    });
    this.addCommand({
      id: "remove-emojis-from-all-notes",
      name: "Remove emojis from the titles of all notes",
      callback: () => {
        this.removeEmojisFromAllNotes();
      }
    });
  }
  addTagsEmojiToTitle(file) {
    var _a, _b;
    const tags = this.app.metadataCache.getFileCache(file).tags;
    if (file.parent == null)
      return;
    const dir = file.parent.path;
    const noteTitle = file.basename;
    if (tags) {
      let emojis = [];
      for (const tag of tags) {
        const tagName = tag.tag;
        if (this.emojiDetectRegex.test(tagName)) {
          let tagEmojis = Array.from((_a = tagName.match(this.emojiDetectRegex)) != null ? _a : []);
          tagEmojis = tagEmojis.filter((element) => !emojis.includes(element));
          emojis = [...emojis, ...tagEmojis];
        }
      }
      const noteTitleWithoutEmoji = noteTitle.replace(this.emojiReplaceRegex, "");
      if (emojis.length > 0) {
        const emojiHeader = (_b = emojis == null ? void 0 : emojis.join("")) != null ? _b : "";
        const newNoteTitle = emojiHeader + " " + noteTitleWithoutEmoji;
        const filePath = dir + "/" + newNoteTitle + ".md";
        this.app.fileManager.renameFile(file, filePath);
      }
    } else {
      let newNoteTitle = noteTitle.replace(this.emojiDetectRegex, "");
      newNoteTitle = newNoteTitle.trim();
      const filePath = dir + "/" + newNoteTitle + ".md";
      this.app.fileManager.renameFile(file, filePath);
    }
  }
  addEmojisToAllNotes() {
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      this.addTagsEmojiToTitle(file);
    }
  }
  removeTagsEmojiFromTitle(note) {
    var _a;
    const tags = this.app.metadataCache.getFileCache(note).tags;
    if (note.parent == null)
      return;
    const dir = note.parent.path;
    let noteTitle = note.basename;
    if (tags) {
      for (const tag of tags) {
        const tagName = tag.tag;
        if (this.emojiDetectRegex.test(tagName)) {
          const tagEmojis = Array.from((_a = tagName.match(this.emojiDetectRegex)) != null ? _a : []);
          for (const emoji of tagEmojis) {
            noteTitle = noteTitle.replace(emoji, "");
          }
        }
      }
      noteTitle = noteTitle.trim();
      const filePath = dir + "/" + noteTitle + ".md";
      this.app.fileManager.renameFile(note, filePath);
    }
  }
  removeEmojisFromAllNotes() {
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      this.removeTagsEmojiFromTitle(file);
    }
  }
};


/* nosourcemap */